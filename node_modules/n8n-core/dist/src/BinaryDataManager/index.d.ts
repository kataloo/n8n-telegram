/// <reference types="node" />
import { IBinaryData, INodeExecutionData } from 'n8n-workflow';
import { IBinaryDataConfig } from '../Interfaces';
export declare class BinaryDataManager {
    private static instance;
    private managers;
    private binaryDataMode;
    private availableModes;
    constructor(config: IBinaryDataConfig);
    static init(config: IBinaryDataConfig, mainManager?: boolean): Promise<void>;
    static getInstance(): BinaryDataManager;
    storeBinaryData(binaryData: IBinaryData, binaryBuffer: Buffer, executionId: string): Promise<IBinaryData>;
    retrieveBinaryData(binaryData: IBinaryData): Promise<Buffer>;
    retrieveBinaryDataByIdentifier(identifier: string): Promise<Buffer>;
    markDataForDeletionByExecutionId(executionId: string): Promise<void>;
    persistBinaryDataForExecutionId(executionId: string): Promise<void>;
    deleteBinaryDataByExecutionId(executionId: string): Promise<void>;
    duplicateBinaryData(inputData: Array<INodeExecutionData[] | null> | unknown, executionId: string): Promise<INodeExecutionData[][]>;
    private generateBinaryId;
    private splitBinaryModeFileId;
    private duplicateBinaryDataInExecData;
}
