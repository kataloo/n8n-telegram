/// <reference types="node" />
import { IBinaryDataConfig, IBinaryDataManager } from '../Interfaces';
export declare class BinaryDataFileSystem implements IBinaryDataManager {
    private storagePath;
    private binaryDataTTL;
    private persistedBinaryDataTTL;
    constructor(config: IBinaryDataConfig);
    init(startPurger?: boolean): Promise<void>;
    storeBinaryData(binaryBuffer: Buffer, executionId: string): Promise<string>;
    retrieveBinaryDataByIdentifier(identifier: string): Promise<Buffer>;
    markDataForDeletionByExecutionId(executionId: string): Promise<void>;
    deleteMarkedFiles(): Promise<void>;
    deleteMarkedPersistedFiles(): Promise<void>;
    private addBinaryIdToPersistMeta;
    private deleteMarkedFilesByMeta;
    duplicateBinaryDataByIdentifier(binaryDataId: string, prefix: string): Promise<string>;
    deleteBinaryDataByExecutionId(executionId: string): Promise<void>;
    deleteBinaryDataByIdentifier(identifier: string): Promise<void>;
    persistBinaryDataForExecutionId(executionId: string): Promise<void>;
    private generateFileName;
    private getBinaryDataMetaPath;
    private getBinaryDataPersistMetaPath;
    private deleteMetaFileByPath;
    private deleteFromLocalStorage;
    private saveToLocalStorage;
    private retrieveFromLocalStorage;
}
