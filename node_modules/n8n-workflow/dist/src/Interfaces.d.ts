/// <reference types="node" />
import * as express from 'express';
import * as FormData from 'form-data';
import { URLSearchParams } from 'url';
import { IDeferredPromise } from './DeferredPromise';
import { Workflow } from './Workflow';
import { WorkflowHooks } from './WorkflowHooks';
import { WorkflowActivationError } from './WorkflowActivationError';
import { WorkflowOperationError } from './WorkflowErrors';
import { NodeApiError, NodeOperationError } from './NodeErrors';
export interface IAdditionalCredentialOptions {
    oauth2?: IOAuth2Options;
    credentialsDecrypted?: ICredentialsDecrypted;
}
export declare type IAllExecuteFunctions = IExecuteFunctions | IExecutePaginationFunctions | IExecuteSingleFunctions | IHookFunctions | ILoadOptionsFunctions | IPollFunctions | ITriggerFunctions | IWebhookFunctions;
export interface IBinaryData {
    [key: string]: string | undefined;
    data: string;
    mimeType: string;
    fileName?: string;
    directory?: string;
    fileExtension?: string;
    id?: string;
}
export interface IOAuth2Options {
    includeCredentialsOnRefreshOnBody?: boolean;
    property?: string;
    tokenType?: string;
    keepBearer?: boolean;
    tokenExpiredStatusCode?: number;
}
export interface IConnection {
    node: string;
    type: string;
    index: number;
}
export declare type ExecutionError = WorkflowActivationError | WorkflowOperationError | NodeOperationError | NodeApiError;
export interface IGetCredentials {
    get(type: string, id: string | null): Promise<ICredentialsEncrypted>;
}
export declare abstract class ICredentials {
    id?: string;
    name: string;
    type: string;
    data: string | undefined;
    nodesAccess: ICredentialNodeAccess[];
    constructor(nodeCredentials: INodeCredentialsDetails, type: string, nodesAccess: ICredentialNodeAccess[], data?: string);
    abstract getData(encryptionKey: string, nodeType?: string): ICredentialDataDecryptedObject;
    abstract getDataKey(key: string, encryptionKey: string, nodeType?: string): CredentialInformation;
    abstract getDataToSave(): ICredentialsEncrypted;
    abstract hasNodeAccess(nodeType: string): boolean;
    abstract setData(data: ICredentialDataDecryptedObject, encryptionKey: string): void;
    abstract setDataKey(key: string, data: CredentialInformation, encryptionKey: string): void;
}
export interface ICredentialNodeAccess {
    nodeType: string;
    user?: string;
    date?: Date;
}
export interface ICredentialsDecrypted {
    id: string | number;
    name: string;
    type: string;
    nodesAccess: ICredentialNodeAccess[];
    data?: ICredentialDataDecryptedObject;
}
export interface ICredentialsEncrypted {
    id?: string | number;
    name: string;
    type: string;
    nodesAccess: ICredentialNodeAccess[];
    data?: string;
}
export interface ICredentialsExpressionResolveValues {
    connectionInputData: INodeExecutionData[];
    itemIndex: number;
    node: INode;
    runExecutionData: IRunExecutionData | null;
    runIndex: number;
    workflow: Workflow;
}
export interface IRequestOptionsSimplified {
    auth?: {
        username: string;
        password: string;
    };
    body: IDataObject;
    headers: IDataObject;
    qs: IDataObject;
}
export interface IRequestOptionsSimplifiedAuth {
    auth?: {
        username: string;
        password: string;
    };
    body?: IDataObject;
    headers?: IDataObject;
    qs?: IDataObject;
}
export declare abstract class ICredentialsHelper {
    encryptionKey: string;
    constructor(encryptionKey: string);
    abstract getParentTypes(name: string): string[];
    abstract authenticate(credentials: ICredentialDataDecryptedObject, typeName: string, requestOptions: IHttpRequestOptions | IRequestOptionsSimplified, workflow: Workflow, node: INode, defaultTimezone: string): Promise<IHttpRequestOptions>;
    abstract getCredentials(nodeCredentials: INodeCredentialsDetails, type: string): Promise<ICredentials>;
    abstract getDecrypted(nodeCredentials: INodeCredentialsDetails, type: string, mode: WorkflowExecuteMode, defaultTimezone: string, raw?: boolean, expressionResolveValues?: ICredentialsExpressionResolveValues): Promise<ICredentialDataDecryptedObject>;
    abstract updateCredentials(nodeCredentials: INodeCredentialsDetails, type: string, data: ICredentialDataDecryptedObject): Promise<void>;
}
export interface IAuthenticateBase {
    type: string;
    properties: {
        [key: string]: string;
    } | IRequestOptionsSimplifiedAuth;
}
export interface IAuthenticateGeneric extends IAuthenticateBase {
    type: 'generic';
    properties: IRequestOptionsSimplifiedAuth;
}
export declare type IAuthenticate = ((credentials: ICredentialDataDecryptedObject, requestOptions: IHttpRequestOptions) => Promise<IHttpRequestOptions>) | IAuthenticateGeneric;
export interface IAuthenticateRuleBase {
    type: string;
    properties: {
        [key: string]: string | number;
    };
    errorMessage?: string;
}
export interface IAuthenticateRuleResponseCode extends IAuthenticateRuleBase {
    type: 'responseCode';
    properties: {
        value: number;
        message: string;
    };
}
export interface IAuthenticateRuleResponseSuccessBody extends IAuthenticateRuleBase {
    type: 'responseSuccessBody';
    properties: {
        message: string;
        key: string;
        value: any;
    };
}
export interface ICredentialTestRequest {
    request: IHttpRequestOptions;
    rules?: IAuthenticateRuleResponseCode[] | IAuthenticateRuleResponseSuccessBody[];
}
export interface ICredentialTestRequestData {
    nodeType?: INodeType;
    testRequest: ICredentialTestRequest;
}
export interface ICredentialType {
    name: string;
    displayName: string;
    icon?: string;
    extends?: string[];
    properties: INodeProperties[];
    documentationUrl?: string;
    __overwrittenProperties?: string[];
    authenticate?: IAuthenticate;
    test?: ICredentialTestRequest;
    genericAuth?: boolean;
}
export interface ICredentialTypes {
    credentialTypes?: ICredentialTypeData;
    init(credentialTypes?: ICredentialTypeData): Promise<void>;
    getAll(): ICredentialType[];
    getByName(credentialType: string): ICredentialType;
}
export interface ICredentialData {
    id?: string;
    name: string;
    data: string;
    nodesAccess: ICredentialNodeAccess[];
}
export declare type CredentialInformation = string | number | boolean | IDataObject;
export interface ICredentialDataDecryptedObject {
    [key: string]: CredentialInformation;
}
export declare type NodeInputConnections = IConnection[][];
export interface INodeConnection {
    sourceIndex: number;
    destinationIndex: number;
}
export interface INodeConnections {
    [key: string]: NodeInputConnections;
}
export interface IConnections {
    [key: string]: INodeConnections;
}
export declare type GenericValue = string | object | number | boolean | undefined | null;
export interface IDataObject {
    [key: string]: GenericValue | IDataObject | GenericValue[] | IDataObject[];
}
export declare type IExecuteResponsePromiseData = IDataObject | IN8nHttpFullResponse;
export interface INodeTypeNameVersion {
    name: string;
    version: number;
}
export interface IGetExecutePollFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): IPollFunctions;
}
export interface IGetExecuteTriggerFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): ITriggerFunctions;
}
export interface IRunNodeResponse {
    data: INodeExecutionData[][] | null | undefined;
    closeFunction?: () => Promise<void>;
}
export interface IGetExecuteFunctions {
    (workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, additionalData: IWorkflowExecuteAdditionalData, executeData: IExecuteData, mode: WorkflowExecuteMode): IExecuteFunctions;
}
export interface IGetExecuteSingleFunctions {
    (workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, itemIndex: number, additionalData: IWorkflowExecuteAdditionalData, executeData: IExecuteData, mode: WorkflowExecuteMode): IExecuteSingleFunctions;
}
export interface IGetExecuteHookFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode, isTest?: boolean, webhookData?: IWebhookData): IHookFunctions;
}
export interface IGetExecuteWebhookFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, webhookData: IWebhookData): IWebhookFunctions;
}
export interface ISourceDataConnections {
    [key: string]: Array<ISourceData[] | null>;
}
export interface IExecuteData {
    data: ITaskDataConnections;
    node: INode;
    source: ITaskDataConnectionsSource | null;
}
export declare type IContextObject = {
    [key: string]: any;
};
export interface IExecuteContextData {
    [key: string]: IContextObject;
}
export declare type IHttpRequestMethods = 'DELETE' | 'GET' | 'HEAD' | 'PATCH' | 'POST' | 'PUT';
export interface IHttpRequestOptions {
    url: string;
    baseURL?: string;
    headers?: IDataObject;
    method?: IHttpRequestMethods;
    body?: FormData | GenericValue | GenericValue[] | Buffer | URLSearchParams;
    qs?: IDataObject;
    arrayFormat?: 'indices' | 'brackets' | 'repeat' | 'comma';
    auth?: {
        username: string;
        password: string;
    };
    disableFollowRedirect?: boolean;
    encoding?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';
    skipSslCertificateValidation?: boolean;
    returnFullResponse?: boolean;
    ignoreHttpStatusErrors?: boolean;
    proxy?: {
        host: string;
        port: number;
        auth?: {
            username: string;
            password: string;
        };
        protocol?: string;
    };
    timeout?: number;
    json?: boolean;
}
export declare type IN8nHttpResponse = IDataObject | Buffer | GenericValue | GenericValue[] | null;
export interface IN8nHttpFullResponse {
    body: IN8nHttpResponse;
    headers: IDataObject;
    statusCode: number;
    statusMessage?: string;
}
export interface IN8nRequestOperations {
    pagination?: IN8nRequestOperationPaginationOffset | ((this: IExecutePaginationFunctions, requestOptions: IRequestOptionsFromParameters) => Promise<INodeExecutionData[]>);
}
export interface IN8nRequestOperationPaginationBase {
    type: string;
    properties: {
        [key: string]: string | number;
    };
}
export interface IN8nRequestOperationPaginationOffset extends IN8nRequestOperationPaginationBase {
    type: 'offset';
    properties: {
        limitParameter: string;
        offsetParameter: string;
        pageSize: number;
        rootProperty?: string;
        type: 'body' | 'query';
    };
}
export interface IExecuteFunctions {
    continueOnFail(): boolean;
    evaluateExpression(expression: string, itemIndex: number): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[];
    executeWorkflow(workflowInfo: IExecuteWorkflowInfo, inputData?: INodeExecutionData[]): Promise<any>;
    getContext(type: string): IContextObject;
    getCredentials(type: string, itemIndex?: number): Promise<ICredentialDataDecryptedObject>;
    getInputData(inputIndex?: number, inputName?: string): INodeExecutionData[];
    getMode(): WorkflowExecuteMode;
    getNode(): INode;
    getNodeParameter<T extends {
        resource: string;
    }>(parameterName: 'resource', itemIndex?: number): T['resource'];
    getNodeParameter(parameterName: string, itemIndex: number, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getWorkflowDataProxy(itemIndex: number): IWorkflowDataProxyData;
    getWorkflowStaticData(type: string): IDataObject;
    getRestApiUrl(): string;
    getTimezone(): string;
    getExecuteData(): IExecuteData;
    getWorkflow(): IWorkflowMetadata;
    prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
    putExecutionToWait(waitTill: Date): Promise<void>;
    sendMessageToUI(message: any): void;
    sendResponse(response: IExecuteResponsePromiseData): void;
    helpers: {
        httpRequest(requestOptions: IHttpRequestOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        [key: string]: (...args: any[]) => any;
    };
}
export interface IExecuteSingleFunctions {
    continueOnFail(): boolean;
    evaluateExpression(expression: string, itemIndex: number | undefined): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[];
    getContext(type: string): IContextObject;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject>;
    getInputData(inputIndex?: number, inputName?: string): INodeExecutionData;
    getItemIndex(): number;
    getMode(): WorkflowExecuteMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getRestApiUrl(): string;
    getTimezone(): string;
    getExecuteData(): IExecuteData;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowDataProxy(): IWorkflowDataProxyData;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        httpRequest(requestOptions: IHttpRequestOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        [key: string]: (...args: any[]) => any;
    };
}
export interface IExecutePaginationFunctions extends IExecuteSingleFunctions {
    makeRoutingRequest(this: IAllExecuteFunctions, requestOptions: IRequestOptionsFromParameters): Promise<INodeExecutionData[]>;
}
export interface IExecuteWorkflowInfo {
    code?: IWorkflowBase;
    id?: string;
}
export declare type ICredentialTestFunction = (this: ICredentialTestFunctions, credential: ICredentialsDecrypted) => Promise<INodeCredentialTestResult>;
export interface ICredentialTestFunctions {
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface ILoadOptionsFunctions {
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject>;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getCurrentNodeParameter(parameterName: string): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object | undefined;
    getCurrentNodeParameters(): INodeParameters | undefined;
    getTimezone(): string;
    getRestApiUrl(): string;
    helpers: {
        httpRequest(requestOptions: IHttpRequestOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        requestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: any, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<any>;
        httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        [key: string]: ((...args: any[]) => any) | undefined;
    };
}
export interface IHookFunctions {
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject>;
    getMode(): WorkflowExecuteMode;
    getActivationMode(): WorkflowActivateMode;
    getNode(): INode;
    getNodeWebhookUrl: (name: string) => string | undefined;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getTimezone(): string;
    getWebhookDescription(name: string): IWebhookDescription | undefined;
    getWebhookName(): string;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        httpRequest(requestOptions: IHttpRequestOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        [key: string]: (...args: any[]) => any;
    };
}
export interface IPollFunctions {
    __emit(data: INodeExecutionData[][]): void;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject>;
    getMode(): WorkflowExecuteMode;
    getActivationMode(): WorkflowActivateMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getRestApiUrl(): string;
    getTimezone(): string;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        httpRequest(requestOptions: IHttpRequestOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        [key: string]: (...args: any[]) => any;
    };
}
export interface ITriggerFunctions {
    emit(data: INodeExecutionData[][], responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>, donePromise?: IDeferredPromise<IRun>): void;
    emitError(error: Error, responsePromise?: IDeferredPromise<IExecuteResponsePromiseData>): void;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject>;
    getMode(): WorkflowExecuteMode;
    getActivationMode(): WorkflowActivateMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getRestApiUrl(): string;
    getTimezone(): string;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        httpRequest(requestOptions: IHttpRequestOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        [key: string]: (...args: any[]) => any;
    };
}
export interface IWebhookFunctions {
    getBodyData(): IDataObject;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject>;
    getHeaderData(): object;
    getMode(): WorkflowExecuteMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getNodeWebhookUrl: (name: string) => string | undefined;
    getParamsData(): object;
    getQueryData(): object;
    getRequestObject(): express.Request;
    getResponseObject(): express.Response;
    getTimezone(): string;
    getWebhookName(): string;
    getWorkflowStaticData(type: string): IDataObject;
    getWorkflow(): IWorkflowMetadata;
    prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
    helpers: {
        httpRequest(requestOptions: IHttpRequestOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        httpRequestWithAuthentication(this: IAllExecuteFunctions, credentialsType: string, requestOptions: IHttpRequestOptions, additionalCredentialOptions?: IAdditionalCredentialOptions): Promise<IN8nHttpResponse | IN8nHttpFullResponse>;
        [key: string]: (...args: any[]) => any;
    };
}
export interface INodeCredentialsDetails {
    id: string | null;
    name: string;
}
export interface INodeCredentials {
    [key: string]: INodeCredentialsDetails;
}
export interface INode {
    name: string;
    typeVersion: number;
    type: string;
    position: [number, number];
    disabled?: boolean;
    notes?: string;
    notesInFlow?: boolean;
    retryOnFail?: boolean;
    maxTries?: number;
    waitBetweenTries?: number;
    alwaysOutputData?: boolean;
    executeOnce?: boolean;
    continueOnFail?: boolean;
    parameters: INodeParameters;
    credentials?: INodeCredentials;
    webhookId?: string;
}
export interface INodes {
    [key: string]: INode;
}
export interface IObservableObject {
    [key: string]: any;
    __dataChanged: boolean;
}
export interface IBinaryKeyData {
    [key: string]: IBinaryData;
}
export interface IPairedItemData {
    item: number;
    input?: number;
}
export interface INodeExecutionData {
    [key: string]: IDataObject | IBinaryKeyData | IPairedItemData | IPairedItemData[] | NodeApiError | NodeOperationError | number | undefined;
    json: IDataObject;
    binary?: IBinaryKeyData;
    error?: NodeApiError | NodeOperationError;
    pairedItem?: IPairedItemData | IPairedItemData[] | number;
}
export interface INodeExecuteFunctions {
    getExecutePollFunctions: IGetExecutePollFunctions;
    getExecuteTriggerFunctions: IGetExecuteTriggerFunctions;
    getExecuteFunctions: IGetExecuteFunctions;
    getExecuteSingleFunctions: IGetExecuteSingleFunctions;
    getExecuteHookFunctions: IGetExecuteHookFunctions;
    getExecuteWebhookFunctions: IGetExecuteWebhookFunctions;
}
export declare type NodeParameterValue = string | number | boolean | undefined | null;
export interface INodeParameters {
    [key: string]: NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[];
}
export declare type NodePropertyTypes = 'boolean' | 'collection' | 'color' | 'dateTime' | 'fixedCollection' | 'hidden' | 'json' | 'notice' | 'multiOptions' | 'number' | 'options' | 'string' | 'credentialsSelect';
export declare type CodeAutocompleteTypes = 'function' | 'functionItem';
export declare type EditorTypes = 'code' | 'json';
export interface ILoadOptions {
    routing?: {
        operations?: IN8nRequestOperations;
        output?: INodeRequestOutput;
        request?: IHttpRequestOptionsFromParameters;
    };
}
export interface INodePropertyTypeOptions {
    alwaysOpenEditWindow?: boolean;
    codeAutocomplete?: CodeAutocompleteTypes;
    editor?: EditorTypes;
    loadOptionsDependsOn?: string[];
    loadOptionsMethod?: string;
    loadOptions?: ILoadOptions;
    maxValue?: number;
    minValue?: number;
    multipleValues?: boolean;
    multipleValueButtonText?: string;
    numberPrecision?: number;
    password?: boolean;
    rows?: number;
    showAlpha?: boolean;
    sortable?: boolean;
    [key: string]: any;
}
export interface IDisplayOptions {
    hide?: {
        [key: string]: NodeParameterValue[] | undefined;
    };
    show?: {
        [key: string]: NodeParameterValue[] | undefined;
    };
}
export interface INodeProperties {
    displayName: string;
    name: string;
    type: NodePropertyTypes;
    typeOptions?: INodePropertyTypeOptions;
    default: NodeParameterValue | INodeParameters | INodeParameters[] | NodeParameterValue[];
    description?: string;
    hint?: string;
    displayOptions?: IDisplayOptions;
    options?: Array<INodePropertyOptions | INodeProperties | INodePropertyCollection>;
    placeholder?: string;
    isNodeSetting?: boolean;
    noDataExpression?: boolean;
    required?: boolean;
    routing?: INodePropertyRouting;
    credentialTypes?: Array<'extends:oAuth2Api' | 'extends:oAuth1Api' | 'has:authenticate' | 'has:genericAuth'>;
}
export interface INodePropertyOptions {
    name: string;
    value: string | number | boolean;
    action?: string;
    description?: string;
    routing?: INodePropertyRouting;
}
export interface INodePropertyCollection {
    displayName: string;
    name: string;
    values: INodeProperties[];
}
export interface IParameterDependencies {
    [key: string]: string[];
}
export interface IPollResponse {
    closeFunction?: () => Promise<void>;
}
export interface ITriggerResponse {
    closeFunction?: () => Promise<void>;
    manualTriggerFunction?: () => Promise<void>;
    manualTriggerResponse?: Promise<INodeExecutionData[][]>;
}
export interface INodeType {
    description: INodeTypeDescription;
    execute?(this: IExecuteFunctions): Promise<INodeExecutionData[][] | null>;
    executeSingle?(this: IExecuteSingleFunctions): Promise<INodeExecutionData>;
    poll?(this: IPollFunctions): Promise<INodeExecutionData[][] | null>;
    trigger?(this: ITriggerFunctions): Promise<ITriggerResponse | undefined>;
    webhook?(this: IWebhookFunctions): Promise<IWebhookResponseData>;
    hooks?: {
        [key: string]: (this: IHookFunctions) => Promise<boolean>;
    };
    methods?: {
        loadOptions?: {
            [key: string]: (this: ILoadOptionsFunctions) => Promise<INodePropertyOptions[]>;
        };
        credentialTest?: {
            [functionName: string]: ICredentialTestFunction;
        };
    };
    webhookMethods?: {
        [key: string]: IWebhookSetupMethods;
    };
}
export interface INodeVersionedType {
    nodeVersions: {
        [key: number]: INodeType;
    };
    currentVersion: number;
    description: INodeTypeBaseDescription;
    getNodeType: (version?: number) => INodeType;
}
export interface INodeCredentialTestResult {
    status: 'OK' | 'Error';
    message: string;
}
export interface INodeCredentialTestRequest {
    nodeToTestWith?: string;
    credentials: ICredentialsDecrypted;
}
export declare type WebhookSetupMethodNames = 'checkExists' | 'create' | 'delete';
export interface IWebhookSetupMethods {
    [key: string]: ((this: IHookFunctions) => Promise<boolean>) | undefined;
    checkExists?: (this: IHookFunctions) => Promise<boolean>;
    create?: (this: IHookFunctions) => Promise<boolean>;
    delete?: (this: IHookFunctions) => Promise<boolean>;
}
export interface INodeCredentialDescription {
    name: string;
    required?: boolean;
    displayOptions?: IDisplayOptions;
    testedBy?: ICredentialTestRequest | string;
}
export declare type INodeIssueTypes = 'credentials' | 'execution' | 'parameters' | 'typeUnknown';
export interface INodeIssueObjectProperty {
    [key: string]: string[];
}
export interface INodeIssueData {
    node: string;
    type: INodeIssueTypes;
    value: boolean | string | string[] | INodeIssueObjectProperty;
}
export interface INodeIssues {
    execution?: boolean;
    credentials?: INodeIssueObjectProperty;
    parameters?: INodeIssueObjectProperty;
    typeUnknown?: boolean;
    [key: string]: undefined | boolean | INodeIssueObjectProperty;
}
export interface IWorfklowIssues {
    [key: string]: INodeIssues;
}
export interface INodeTypeBaseDescription {
    displayName: string;
    name: string;
    icon?: string;
    group: string[];
    description: string;
    documentationUrl?: string;
    subtitle?: string;
    defaultVersion?: number;
    codex?: CodexData;
}
export interface INodePropertyRouting {
    operations?: IN8nRequestOperations;
    output?: INodeRequestOutput;
    request?: IHttpRequestOptionsFromParameters;
    send?: INodeRequestSend;
}
export declare type PostReceiveAction = ((this: IExecuteSingleFunctions, items: INodeExecutionData[], response: IN8nHttpFullResponse) => Promise<INodeExecutionData[]>) | IPostReceiveBinaryData | IPostReceiveRootProperty | IPostReceiveSet | IPostReceiveSetKeyValue | IPostReceiveSort;
export declare type PreSendAction = (this: IExecuteSingleFunctions, requestOptions: IHttpRequestOptions) => Promise<IHttpRequestOptions>;
export interface INodeRequestOutput {
    maxResults?: number | string;
    postReceive?: PostReceiveAction[];
}
export interface INodeRequestSend {
    preSend?: PreSendAction[];
    paginate?: boolean | string;
    property?: string;
    propertyInDotNotation?: boolean;
    type?: 'body' | 'query';
    value?: string;
}
export interface IPostReceiveBase {
    type: string;
    properties: {
        [key: string]: string | number | IDataObject;
    };
    errorMessage?: string;
}
export interface IPostReceiveBinaryData extends IPostReceiveBase {
    type: 'binaryData';
    properties: {
        destinationProperty: string;
    };
}
export interface IPostReceiveRootProperty extends IPostReceiveBase {
    type: 'rootProperty';
    properties: {
        property: string;
    };
}
export interface IPostReceiveSet extends IPostReceiveBase {
    type: 'set';
    properties: {
        value: string;
    };
}
export interface IPostReceiveSetKeyValue extends IPostReceiveBase {
    type: 'setKeyValue';
    properties: {
        [key: string]: string | number;
    };
}
export interface IPostReceiveSort extends IPostReceiveBase {
    type: 'sort';
    properties: {
        key: string;
    };
}
export interface IHttpRequestOptionsFromParameters extends Partial<IHttpRequestOptions> {
    url?: string;
}
export interface IRequestOptionsFromParameters {
    maxResults?: number | string;
    options: IHttpRequestOptionsFromParameters;
    paginate?: boolean | string;
    preSend: PreSendAction[];
    postReceive: Array<{
        data: {
            parameterValue: string | IDataObject | undefined;
        };
        actions: PostReceiveAction[];
    }>;
    requestOperations?: IN8nRequestOperations;
}
export interface INodeTypeDescription extends INodeTypeBaseDescription {
    version: number | number[];
    defaults: INodeParameters;
    eventTriggerDescription?: string;
    activationMessage?: string;
    inputs: string[];
    inputNames?: string[];
    outputs: string[];
    outputNames?: string[];
    properties: INodeProperties[];
    credentials?: INodeCredentialDescription[];
    maxNodes?: number;
    polling?: boolean;
    requestDefaults?: IHttpRequestOptionsFromParameters;
    requestOperations?: IN8nRequestOperations;
    hooks?: {
        [key: string]: INodeHookDescription[] | undefined;
        activate?: INodeHookDescription[];
        deactivate?: INodeHookDescription[];
    };
    webhooks?: IWebhookDescription[];
    translation?: {
        [key: string]: object;
    };
    mockManualExecution?: true;
    triggerPanel?: {
        header?: string;
        executionsHelp?: string | {
            active: string;
            inactive: string;
        };
        activationHint?: string | {
            active: string;
            inactive: string;
        };
    };
}
export interface INodeHookDescription {
    method: string;
}
export interface IWebhookData {
    httpMethod: WebhookHttpMethod;
    node: string;
    path: string;
    webhookDescription: IWebhookDescription;
    workflowId: string;
    workflowExecuteAdditionalData: IWorkflowExecuteAdditionalData;
    webhookId?: string;
}
export interface IWebhookDescription {
    [key: string]: WebhookHttpMethod | WebhookResponseMode | boolean | string | undefined;
    httpMethod: WebhookHttpMethod | string;
    isFullPath?: boolean;
    name: string;
    path: string;
    responseBinaryPropertyName?: string;
    responseContentType?: string;
    responsePropertyName?: string;
    responseMode?: WebhookResponseMode | string;
    responseData?: WebhookResponseData | string;
    restartWebhook?: boolean;
}
export interface IWorkflowDataProxyData {
    [key: string]: any;
    $binary: any;
    $data: any;
    $env: any;
    $evaluateExpression: any;
    $item: any;
    $items: any;
    $json: any;
    $node: any;
    $parameter: any;
    $position: any;
    $workflow: any;
    $: any;
    $input: any;
    $thisItem: any;
    $thisRunIndex: number;
    $thisItemIndex: number;
    $now: any;
    $today: any;
}
export declare type IWorkflowDataProxyAdditionalKeys = IDataObject;
export interface IWorkflowMetadata {
    id?: number | string;
    name?: string;
    active: boolean;
}
export declare type WebhookHttpMethod = 'DELETE' | 'GET' | 'HEAD' | 'PATCH' | 'POST' | 'PUT' | 'OPTIONS';
export interface IWebhookResponseData {
    workflowData?: INodeExecutionData[][];
    webhookResponse?: any;
    noWebhookResponse?: boolean;
}
export declare type WebhookResponseData = 'allEntries' | 'firstEntryJson' | 'firstEntryBinary' | 'noData';
export declare type WebhookResponseMode = 'onReceived' | 'lastNode';
export interface INodeTypes {
    nodeTypes: INodeTypeData;
    init(nodeTypes?: INodeTypeData): Promise<void>;
    getAll(): Array<INodeType | INodeVersionedType>;
    getByNameAndVersion(nodeType: string, version?: number): INodeType | undefined;
}
export interface ICredentialTypeData {
    [key: string]: {
        type: ICredentialType;
        sourcePath: string;
    };
}
export interface INodeTypeData {
    [key: string]: {
        type: INodeType | INodeVersionedType;
        sourcePath: string;
    };
}
export interface IRun {
    data: IRunExecutionData;
    finished?: boolean;
    mode: WorkflowExecuteMode;
    waitTill?: Date;
    startedAt: Date;
    stoppedAt?: Date;
}
export interface IRunExecutionData {
    startData?: {
        destinationNode?: string;
        runNodeFilter?: string[];
    };
    resultData: {
        error?: ExecutionError;
        runData: IRunData;
        lastNodeExecuted?: string;
    };
    executionData?: {
        contextData: IExecuteContextData;
        nodeExecutionStack: IExecuteData[];
        waitingExecution: IWaitingForExecution;
        waitingExecutionSource: IWaitingForExecutionSource | null;
    };
    waitTill?: Date;
}
export interface IRunData {
    [key: string]: ITaskData[];
}
export interface ITaskData {
    startTime: number;
    executionTime: number;
    data?: ITaskDataConnections;
    error?: ExecutionError;
    source: Array<ISourceData | null>;
}
export interface ISourceData {
    previousNode: string;
    previousNodeOutput?: number;
    previousNodeRun?: number;
}
export interface ITaskDataConnections {
    [key: string]: Array<INodeExecutionData[] | null>;
}
export interface IWaitingForExecution {
    [key: string]: {
        [key: number]: ITaskDataConnections;
    };
}
export interface ITaskDataConnectionsSource {
    [key: string]: Array<ISourceData | null>;
}
export interface IWaitingForExecutionSource {
    [key: string]: {
        [key: number]: ITaskDataConnectionsSource;
    };
}
export interface IWorkflowBase {
    id?: number | string | any;
    name: string;
    active: boolean;
    createdAt: Date;
    updatedAt: Date;
    nodes: INode[];
    connections: IConnections;
    settings?: IWorkflowSettings;
    staticData?: IDataObject;
}
export interface IWorkflowCredentials {
    [credentialType: string]: {
        [id: string]: ICredentialsEncrypted;
    };
}
export interface IWorkflowExecuteHooks {
    [key: string]: Array<(...args: any[]) => Promise<void>> | undefined;
    nodeExecuteAfter?: Array<(nodeName: string, data: ITaskData, executionData: IRunExecutionData) => Promise<void>>;
    nodeExecuteBefore?: Array<(nodeName: string) => Promise<void>>;
    workflowExecuteAfter?: Array<(data: IRun, newStaticData: IDataObject) => Promise<void>>;
    workflowExecuteBefore?: Array<(workflow: Workflow, data: IRunExecutionData) => Promise<void>>;
    sendResponse?: Array<(response: IExecuteResponsePromiseData) => Promise<void>>;
}
export interface IWorkflowExecuteAdditionalData {
    credentialsHelper: ICredentialsHelper;
    encryptionKey: string;
    executeWorkflow: (workflowInfo: IExecuteWorkflowInfo, additionalData: IWorkflowExecuteAdditionalData, inputData?: INodeExecutionData[], parentExecutionId?: string, loadedWorkflowData?: IWorkflowBase, loadedRunData?: any) => Promise<any>;
    executionId?: string;
    hooks?: WorkflowHooks;
    httpResponse?: express.Response;
    httpRequest?: express.Request;
    restApiUrl: string;
    sendMessageToUI?: (source: string, message: any) => void;
    timezone: string;
    webhookBaseUrl: string;
    webhookWaitingBaseUrl: string;
    webhookTestBaseUrl: string;
    currentNodeParameters?: INodeParameters;
    executionTimeoutTimestamp?: number;
    userId: string;
}
export declare type WorkflowExecuteMode = 'cli' | 'error' | 'integrated' | 'internal' | 'manual' | 'retry' | 'trigger' | 'webhook';
export declare type WorkflowActivateMode = 'init' | 'create' | 'update' | 'activate' | 'manual';
export interface IWorkflowHooksOptionalParameters {
    parentProcessMode?: string;
    retryOf?: string;
    sessionId?: string;
}
export interface IWorkflowSettings {
    [key: string]: IDataObject | string | number | boolean | undefined;
}
export declare type LogTypes = 'debug' | 'verbose' | 'info' | 'warn' | 'error';
export interface ILogger {
    log: (type: LogTypes, message: string, meta?: object) => void;
    debug: (message: string, meta?: object) => void;
    verbose: (message: string, meta?: object) => void;
    info: (message: string, meta?: object) => void;
    warn: (message: string, meta?: object) => void;
    error: (message: string, meta?: object) => void;
}
export interface IStatusCodeMessages {
    [key: string]: string;
}
export declare type CodexData = {
    categories?: string[];
    subcategories?: {
        [category: string]: string[];
    };
    alias?: string[];
};
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonValue[];
export declare type JsonObject = {
    [key: string]: JsonValue;
};
export declare type AllEntities<M> = M extends {
    [key: string]: string;
} ? Entity<M, keyof M> : never;
export declare type Entity<M, K> = K extends keyof M ? {
    resource: K;
    operation: M[K];
} : never;
export declare type PropertiesOf<M extends {
    resource: string;
    operation: string;
}> = Array<Omit<INodeProperties, 'displayOptions'> & {
    displayOptions?: {
        [key in 'show' | 'hide']?: {
            resource?: Array<M['resource']>;
            operation?: Array<M['operation']>;
            [otherKey: string]: NodeParameterValue[] | undefined;
        };
    };
}>;
export interface INodesGraph {
    node_types: string[];
    node_connections: IDataObject[];
    nodes: INodesGraphNode;
    notes: INotesGraphNode;
}
export interface INodesGraphNode {
    [key: string]: INodeGraphItem;
}
export interface INotesGraphNode {
    [key: string]: INoteGraphItem;
}
export interface INoteGraphItem {
    overlapping: boolean;
    position: [number, number];
    height: number;
    width: number;
}
export interface INodeGraphItem {
    type: string;
    resource?: string;
    operation?: string;
    domain?: string;
    domain_base?: string;
    domain_path?: string;
    position: [number, number];
    mode?: string;
    credential_type?: string;
    credential_set?: boolean;
    method?: string;
}
export interface INodeNameIndex {
    [name: string]: string;
}
export interface INodesGraphResult {
    nodeGraph: INodesGraph;
    nameIndices: INodeNameIndex;
}
export interface ITelemetryClientConfig {
    url: string;
    key: string;
}
export interface ITelemetrySettings {
    enabled: boolean;
    config?: ITelemetryClientConfig;
}
export interface IConnectedNode {
    name: string;
    indicies: number[];
    depth: number;
}
export declare enum OAuth2GrantType {
    authorizationCode = "authorizationCode",
    clientCredentials = "clientCredentials"
}
export interface IOAuth2Credentials {
    grantType: 'authorizationCode' | 'clientCredentials';
    clientId: string;
    clientSecret: string;
    accessTokenUrl: string;
    authUrl: string;
    authQueryParameters: string;
    authentication: 'body' | 'header';
    scope: string;
    oauthTokenData?: IDataObject;
}
