import { CredentialInformation, ICredentialDataDecryptedObject, ICredentials, ICredentialsEncrypted, ICredentialsHelper, IExecuteData, IExecuteFunctions, IExecuteSingleFunctions, IHttpRequestOptions, INode, INodeCredentialsDetails, INodeExecutionData, INodeParameters, INodeType, INodeTypeData, INodeTypes, INodeVersionedType, IRunExecutionData, ITaskDataConnections, IWorkflowDataProxyAdditionalKeys, IWorkflowExecuteAdditionalData, NodeParameterValue, Workflow, WorkflowExecuteMode } from '../src';
export interface INodeTypesObject {
    [key: string]: INodeType;
}
export declare class Credentials extends ICredentials {
    hasNodeAccess(nodeType: string): boolean;
    setData(data: ICredentialDataDecryptedObject, encryptionKey: string): void;
    setDataKey(key: string, data: CredentialInformation, encryptionKey: string): void;
    getData(encryptionKey: string, nodeType?: string): ICredentialDataDecryptedObject;
    getDataKey(key: string, encryptionKey: string, nodeType?: string): CredentialInformation;
    getDataToSave(): ICredentialsEncrypted;
}
export declare class CredentialsHelper extends ICredentialsHelper {
    authenticate(credentials: ICredentialDataDecryptedObject, typeName: string, requestParams: IHttpRequestOptions): Promise<IHttpRequestOptions>;
    getParentTypes(name: string): string[];
    getDecrypted(nodeCredentials: INodeCredentialsDetails, type: string): Promise<ICredentialDataDecryptedObject>;
    getCredentials(nodeCredentials: INodeCredentialsDetails, type: string): Promise<ICredentials>;
    updateCredentials(nodeCredentials: INodeCredentialsDetails, type: string, data: ICredentialDataDecryptedObject): Promise<void>;
}
export declare function getNodeParameter(workflow: Workflow, runExecutionData: IRunExecutionData | null, runIndex: number, connectionInputData: INodeExecutionData[], node: INode, parameterName: string, itemIndex: number, mode: WorkflowExecuteMode, timezone: string, additionalKeys: IWorkflowDataProxyAdditionalKeys, executeData: IExecuteData, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
export declare function getExecuteFunctions(workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, itemIndex: number, additionalData: IWorkflowExecuteAdditionalData, executeData: IExecuteData, mode: WorkflowExecuteMode): IExecuteFunctions;
export declare function getExecuteSingleFunctions(workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, itemIndex: number, additionalData: IWorkflowExecuteAdditionalData, executeData: IExecuteData, mode: WorkflowExecuteMode): IExecuteSingleFunctions;
declare class NodeTypesClass implements INodeTypes {
    nodeTypes: INodeTypeData;
    init(nodeTypes: INodeTypeData): Promise<void>;
    getAll(): INodeType[];
    getByName(nodeType: string): INodeType | INodeVersionedType | undefined;
    getByNameAndVersion(nodeType: string, version?: number): INodeType;
}
export declare function NodeTypes(): NodeTypesClass;
export declare function WorkflowExecuteAdditionalData(): IWorkflowExecuteAdditionalData;
export {};
